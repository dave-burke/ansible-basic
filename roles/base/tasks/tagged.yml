---
- name: Ensure time zone is America/Chicago
  timezone: name=America/Chicago

- name: Ensure cron is installed
  package:
    name: "{{cron_pkg}}"
    state: installed

- name: Ensure cron service is running
  systemd:
    name: "{{cron_svc}}"
    state: started
    enabled: true

- name: Ensure reboot-if-needed script is present
  copy:
    src: "reboot-if-needed.sh"
    dest: "/root/reboot-if-needed.sh"
    mode: "0755"

- name: Ensure reboot-if-needed is run overnight
  cron:
    name: "Reboot if needed"
    user: "root"
    hour: "4"
    minute: "30"
    job: "/root/reboot-if-needed.sh"

- name: Add a non-root user
  user: name={{admin_user}} groups={{sudo_group}} append=true shell=/usr/bin/zsh
  register: base_user

  # I have no idea why the 'user' module doesn't do this
- name: Ensure user is the owner of their home dir
  file:
    state: directory
    name: /home/{{admin_user}}
    owner: "{{admin_user}}"
    group: "{{admin_user}}"

- name: Disable SSH password logins
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: #?PasswordAuthentication.*
    line: PasswordAuthentication no

- name: Ensure local bin directory exists
  file:
    dest: /home/{{admin_user}}/.local/bin
    state: directory
    owner: "{{admin_user}}"
    group: "{{admin_user}}"

- name: Add upgrade script
  copy:
    src: "{{ansible_pkg_mgr}}-upgrade.sh"
    dest: /home/{{admin_user}}/.local/bin/upgrade.sh
    mode: 0755
    owner: "{{admin_user}}"
    group: "{{admin_user}}"

- name: Ensure ufw is installed
  package:
    name: "ufw"
    state: installed

- name: Ensure ufw service is running
  systemd:
    name: "ufw"
    state: started
    enabled: true

- name: Ensure SSH trafic is limited through firewall
  tags: ['ufw']
  ufw:
    rule: limit
    port: 'ssh'

- name: Ensure UWF uses a default deny policy
  tags: ['ufw']
  ufw:
    state: enabled
    policy: deny

- name: Add IP address of all hosts to all hosts
  lineinfile:
    state: present
    dest: /etc/hosts
    regexp: '.*{{ item }}$'
    line: "{{ hostvars[item].ansible_host }}	{{item}}"
  when: hostvars[item].ansible_host is defined
  with_items: "{{ groups.all }}"

